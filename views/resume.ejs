<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Resume Maker</title>
    <link href="/assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <style>
        /* CSS styles to split the page into two halves */
        .container1 {
    display: flex;
}

.form-container {
    width: 40%; /* 40% width for the form */
    overflow-y: auto; /* Add vertical scrollbar if content overflows */
    padding: 20px;
    border: 1px solid #ccc;
    box-sizing: border-box;
    background-color: #f8f9fa; /* Light gray background color */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Box shadow for depth */
    flex-grow: 1; /* Take remaining space */
    max-height: calc(100vh - 40px); /* Maximum height to fit the viewport minus header */
}

.resume-container {
    width: 60%; /* 60% width for the resume */
    padding: 20px;
    border: 1px solid #ccc;
    box-sizing: border-box;
    background-color: #f8f9fa; /* Light gray background color */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Box shadow for depth */
    overflow-y: auto; /* Add vertical scrollbar if content overflows */
    max-height: calc(100vh - 40px); /* Maximum height to fit the viewport minus header */
    position: relative;
}
        .resume-actions {
            position: absolute;
            right: 30px;
        }
        i{
            cursor: pointer;
        }

        .resume-actions button {
            margin-left: 10px;
            padding: 10px 20px; /* Add padding to the buttons */
            border: none; /* Remove default border */
            background-color: #007bff; /* Button background color */
            color: #fff; /* Text color */
            border-radius: 5px; /* Rounded corners */
            cursor: pointer; /* Add cursor pointer */
            transition: background-color 0.3s; /* Smooth transition for background color */
        }

        .resume-actions button:hover {
            background-color: #0056b3; /* Darker background color on hover */
        }

        /* Additional styling for the buttons */
        #preview-btn {
            background-color: #99ccff; /* Green color for 'Preview' button */
            color: black;
            font-size: 15px;
        }
        #resume-score-btn{
            background-color: rgb(144, 203, 255);
            color: black;
            font-size: 15px;
        }
        #check-score-btn {
            background-color: rgb(144, 203, 255); /* Light blue background */
            color: black; /* Black text color */
            font-size: 15px; /* Font size */
            border: none; /* No border */
            padding: 10px 20px; /* Padding */
            border-radius: 5px; /* Rounded corners */
            cursor: pointer; /* Cursor style */
            transition: background-color 0.3s, color 0.3s; /* Smooth transition */
            display: inline-block;
        }
        #download-btn {
            background-color:  #99ccff; /* Red color for 'Download' button */
            color: black;
            font-size: 15px;
        }

        /* Styling for the dropdown menu */
        .download-dropdown {
            display: none;
            position: absolute;
            top: 45px;
            right: 0;
            z-index: 1;
        }

        .download-dropdown button {
            display: block;
            width: 100%;
            padding: 8px 10px;
            border: none;
            background-color: #cce6ff;
            text-align: left;
            cursor: pointer;
            transition: background-color 0.3s;
            color: black;
        }

        .download-dropdown button:hover {
            background-color: #99ccff;
        }

        .highlight {
            background-color: #f5eb7f; /* Example highlight color */
        }
        .highlight1 {
            background-color: #ff654a; /* Example highlight color */
        }
        .hidden {
            display: none;
        }
i:not(.delete-icon.bi.bi-trash3,.bi.bi-info-circle) {
    font-size: 1.2em;
}

i:not(.delete-icon.bi.bi-trash3,.bi.bi-info-circle):hover {
    font-size: 1.3em;
}
i.delete-icon.bi.bi-trash3 {
    font-size: 1em; /* Adjust as needed */
}

/* Override font size changes for hover state of <i> elements with specified class */
i.delete-icon.bi.bi-trash3:hover {
    font-size: 1.1em; /* Adjust as needed */
}
.bi-info-circle {
    position: relative;
    display: inline-block; /* Ensure it takes up only as much space as needed */
}

.bi-info-circle .score {
    display: inline-block; /* Ensure it takes up only as much space as needed */
}

.bi-info-circle::after {
    content: "Resume Score"; /* Text to display when hovering */
    position: absolute;
    top: 100%; /* Position it below the parent element */
    left: 50%; /* Position it horizontally centered */
    transform: translateX(-50%); /* Center it horizontally */
    background-color: rgba(0, 0, 0, 0.8); /* Background color */
    color: #fff; /* Text color */
    padding: 5px 10px; /* Padding around the text */
    border-radius: 5px; /* Rounded corners */
    font-size: 12px; /* Font size */
    z-index: 999; /* Ensure it's on top of other elements */
    white-space: nowrap; /* Prevent line breaks */
    opacity: 0; /* Hide by default */
    pointer-events: none; /* Ensure it doesn't interfere with mouse events */
    transition: opacity 0.3s ease; /* Add a smooth transition effect */
}

.bi-info-circle:hover::after {
    opacity: 1; /* Show on hover */
}
        h2{
            text-decoration: underline;
        }
        .form-container input[type="text"],
.form-container label {
    display: block;
    margin-bottom: 10px;
    font-size: 16px;
    padding: 8px;
    width: calc(100% - 16px); /* Adjust for padding */
    box-sizing: border-box;
}

.form-container input[type="text"]:focus {
    outline: none;
    border-color: #007bff; /* Example focus color */
}

.form-container label {
    font-weight: bold;
}
.resume-score{
    color: green;
}
#resume-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 9999;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
        }

        #resume-score-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 9999;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
        }

        /* Style for the close button */
        .close-btn, .close-popup-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-size: 20px;
            color: #888;
        }
        .loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
  position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 9999; /* Ensure loader is on top of everything */
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
#job-description {
            width: 1000px;
            height: 400px;
            resize: vertical;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
        }
        #res-score{
            display: inline-block;
        }
        #overlay1, #overlay2 {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black color */
    backdrop-filter: blur(5px); /* Apply blur effect */
    z-index: 1000; /* Ensure it's above other content */
    display: none; /* Initially hidden */
}
    </style>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>
<body>

    <div class="container1">
        
        <div class="form-container">

        </div>
        <div class="resume-container">

            <div class="resume-actions">
                <div class="loader hidden"></div>
                <button id="resume-score-btn">Resume Score</button>
                <button id="preview-btn">Preview</button>
                <button id="download-btn">Download</button>
                <div class="download-dropdown" id="download-dropdown">
                    <button id="pdf-download">PDF</button>
                    <button id="jpg-download">JPG</button>
                    <button id="html-download">HTML</button>
                </div>
            </div>
            <!-- Resume section -->
            <div id="resume">
                <!-- Render the provided resume template -->
                <%- resume.code %>
            </div>
        </div>
    </div>

    <div id="resume-popup"></div>
    <div id="resume-score-popup">
        <textarea id="job-description" placeholder="Paste your job description here..."></textarea>
        <button id="check-score-btn" >Check Score</button> <b><p id="res-score"></p></b> </p>
    </div>
    <div id="overlay1"></div>
    <div id="overlay2"></div>

    <script>
    $(document).ready(function() {
        window.jsPDF = window.jspdf.jsPDF;
        window.html2canvas = html2canvas;
        function cosineSimilarity(textA, textB) {
    // Tokenize the text into words
            const wordsA = textA.toLowerCase().match(/\b\w+\b/g);
            const wordsB = textB.toLowerCase().match(/\b\w+\b/g);

            // Count term frequencies
            const tfA = calculateTermFrequency(wordsA);
            const tfB = calculateTermFrequency(wordsB);

            // Calculate dot product
            let dotProduct = 0;
            for (const term in tfA) {
                if (term in tfB) {
                    dotProduct += tfA[term] * tfB[term];
                }
            }

            // Calculate magnitudes
            const magnitudeA = calculateMagnitude(tfA);
            const magnitudeB = calculateMagnitude(tfB);

            // Calculate cosine similarity
            const similarity = dotProduct / (magnitudeA * magnitudeB);
            return similarity;
        }

        function calculateTermFrequency(words) {
            const termFrequency = {};
            const totalWords = words.length;
            for (const word of words) {
                termFrequency[word] = (termFrequency[word] || 0) + (1 / totalWords);
            }
            return termFrequency;
        }

        function calculateMagnitude(termFrequency) {
            let sumOfSquares = 0;
            for (const term in termFrequency) {
                sumOfSquares += Math.pow(termFrequency[term], 2);
            }
            return Math.sqrt(sumOfSquares);
        }




        function generateRandomString(length) {
            const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            let result = '';
            for (let i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() * characters.length));
            }
            return result;
        }

        function generateOptionalForm(element, leftForm) {
        const container = $('<div>').addClass('optional-item').css('display', 'inline-flex');
        const optionalText = $('<b>').text('Optional: ').addClass('optional-text').css('text-decoration', 'underline'); 
            const labelText = $('<button>')
        .text(element.data('field'))
        .addClass('optional-label')
        .click(function(event) {
            event.preventDefault(); // Prevent default button action
            element.addClass('highlight1');
            $('.resume-container').animate({
                scrollTop: element.offset().top - $('.resume-container').offset().top + $('.resume-container').scrollTop()
            }, 500);
        })
        .mouseleave(function() {
            element.removeClass('highlight1');
        });
        const space = $('<span>').html('&nbsp;&nbsp;'); // Non-breaking space for spacing
        const deleteIcon = $('<i>').addClass('delete-icon bi bi-trash3').click(function() {
            deleteIcon.toggleClass('bi-trash3 bi-plus-circle');
            element.toggleClass('hidden');
        }).mouseenter(function() {
            element.addClass('highlight1');
            $('.resume-container').animate({
                    scrollTop: element.offset().top - $('.resume-container').offset().top + $('.resume-container').scrollTop()
            }, 500);
        }).mouseleave(function() {
            element.removeClass('highlight1');
        });

        container.append(optionalText, space, labelText, space, deleteIcon); // Append optional text, space, label text, and delete icon
        leftForm.append(container, $('<br>'), $('<br>'));
    }

        function generateAddableForm(element, leftForm) {
            const textHeading = $('<h2>').text(element.data('field')).css({
                display: 'inline-block',
                marginRight: '10px'
            });
            const plusIcon = $('<i>').addClass('bi bi-plus-square').click(function() {
                console.log("Clicked")
                const elementToClone = element.find('.addable').last();
                console.log(elementToClone)
                const elementClone = elementToClone.clone();

                if (elementClone.length) {
                    elementToClone.after(elementClone);

                    const clonedFormSection = generateRandomString(8);
                    const clonedForm = $('<form>').attr('id', clonedFormSection + '-form');
                    clonedForm.append(document.createElement("br"))
                    const clonedMinusIcon = $('<i>').addClass('bi bi-dash-square').click(function() {
                        elementClone.remove();
                        $(`#${clonedFormSection+'-form'}`).remove(); 
                    });
                    clonedForm.append(clonedMinusIcon, document.createElement("br"));
                    const clonedElements = elementClone.find('.editable');

                    clonedElements.each(function() {
                        const clonedElement = $(this);
                        if (clonedElement.hasClass("optional")) {
                            generateOptionalForm(clonedElement, clonedForm);
                        }
                        else if (clonedElement.hasClass("addAfter")){
                            // nothing
                        } else {
                            const clonedLabel = $('<label>').text(clonedElement.data('field'));
                            let clonedInput;

                            if (clonedElement.text().trim().length > 20) { // Change 20 to your desired threshold
                                // If the input value is longer than 20 characters, use a textarea
                                clonedInput = $('<textarea>').val(clonedElement.text()).attr({
                                    name: clonedElement.data('field')
                                }).css({
                                    'display': 'block',
                                    'margin-bottom': '10px',
                                    'font-size': '16px',
                                    'padding': '8px',
                                    'width': 'calc(100% - 16px)', /* Adjust for padding */
                                    'box-sizing': 'border-box',
                                    'resize': 'vertical', // Allow vertical resizing
                                    'height': '100px' // Increase height
                                });
                            } else {
                                // Otherwise, use a normal text input
                                clonedInput = $('<input>').attr({
                                    type: 'text',
                                    value: clonedElement.text(),
                                    name: clonedElement.data('field')
                                }).css({
                                    'display': 'block',
                                    'margin-bottom': '10px',
                                    'font-size': '16px',
                                    'padding': '8px',
                                    'width': 'calc(100% - 16px)', /* Adjust for padding */
                                    'box-sizing': 'border-box'
                                });
                            }

                            clonedForm.append(clonedLabel, clonedInput, $('<br>'));

                            clonedInput.on('input', function() {
                                clonedElement.text(clonedInput.val());
                                clonedElement.addClass('highlight');
                            }).on('focus', function() {
                                clonedElement.addClass('highlight');
                                $('.resume-container').animate({
                                    scrollTop: clonedElement.offset().top - $('.resume-container').offset().top + $('.resume-container').scrollTop()
                                }, 500);
                            }).on('blur', function() {
                                clonedElement.removeClass('highlight');
                            });

                        }
                    });

                    const nextHr = plusIcon.nextAll('hr').first();
                    clonedForm.insertBefore(nextHr);
                }
            });

            leftForm.append(textHeading, plusIcon, $('<br>'));
        }

        function generateEditableForm(element, leftForm) {
            if (element.prop('tagName').toLowerCase() === 'img') {
                const label = $('<label>').text('Image').attr('for', 'image-upload');
                const uploadInput = $('<input>').attr({
                    type: 'file',
                    accept: 'image/*',
                    name: 'image',
                    id: 'image-upload'
                }).change(function() {
                    const file = uploadInput.prop('files')[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            element.attr('src', e.target.result);
                        };
                        reader.readAsDataURL(file);
                    }
                });

                leftForm.append(label, uploadInput, $('<br>'));
            } else {
                const label = $('<label>').text(element.data('field')).attr('for', element.prop('tagName').toLowerCase());
                const inputValue = element.text().trim(); // Get input value without leading/trailing spaces
                let inputElement;

                if (inputValue.length > 20) { // Change 20 to your desired threshold
                    // If the input value is longer than 20 characters, use a textarea
                    inputElement = $('<textarea>').val(inputValue).attr({
                        name: element.data('field'),
                        id: element.prop('tagName').toLowerCase()
                    }).css({
                        'display': 'block',
                        'margin-bottom': '10px',
                        'font-size': '16px',
                        'padding': '8px',
                        'width': 'calc(100% - 16px)', /* Adjust for padding */
                        'box-sizing': 'border-box',
                        'resize': 'vertical', // Allow vertical resizing
                        'height': '100px'
                    });
                } else {
                    // Otherwise, use a normal text input
                    inputElement = $('<input>').attr({
                        type: 'text',
                        value: inputValue,
                        name: element.data('field'),
                        id: element.prop('tagName').toLowerCase()
                    }).css({
                        'display': 'block',
                        'margin-bottom': '10px',
                        'font-size': '16px',
                        'padding': '8px',
                        'width': 'calc(100% - 16px)', /* Adjust for padding */
                        'box-sizing': 'border-box'
                    });
                }

                leftForm.append(label, inputElement, $('<br>'));

                inputElement.on('input', function() {
                    element.text(inputElement.val());
                    element.addClass('highlight');
                }).on('focus', function() {
                    element.addClass('highlight');
                    $('.resume-container').animate({
                        scrollTop: element.offset().top - $('.resume-container').offset().top + $('.resume-container').scrollTop()
                    }, 500);
                }).on('blur', function() {
                    element.removeClass('highlight');
                });
            }
        }

        function generateLeftSection() {
            const leftForm = $('<form>').attr('id', 'left-form');
            const resume = $('#resume');
            const editableElements = resume.find('.editable');

            editableElements.each(function() {
                const element = $(this);
                if (element.hasClass('optional')) {
                    generateOptionalForm(element, leftForm);
                } else if (element.hasClass('addable')) {
                    if (element.hasClass('addBtn')) {
                        generateAddableForm(element, leftForm);
                    }
                } else if (element.hasClass('addAfter')) {
                    leftForm.append($('<hr>'));
                } else {
                    generateEditableForm(element, leftForm);
                }
            });

            $('.form-container').append(leftForm);
        }


        generateLeftSection(); // Call the function to generate the left section

        $('#download-btn').click(function() {
            $('#download-dropdown').toggle();
        });

            // Hide download dropdown when clicking outside
        $(document).click(function(event) {
            if (!$(event.target).closest('.download-dropdown').length && !$(event.target).is('#download-btn')) {
                $('#download-dropdown').hide();
            }
        });

        $('#preview-btn').click(function() {
                // Get the HTML content of the resume element
                var resumeContent = $('#resume').html();
                $('#resume-popup').html(resumeContent);
                $('#resume-popup').fadeIn();
                $('#resume-popup').prepend('<span class="close-btn">&times;</span>');
                $('#overlay1').fadeIn();
            });

            
            $('#resume-score-btn').click(function() {
                // Get the HTML content of the resume element
                                // Show the resume popup
                $('#resume-score-popup').fadeIn();

                $('#resume-score-popup').prepend('<span class="close-popup-btn">&times;</span>');
                $('#overlay2').fadeIn();

            });
            $('#check-score-btn').click(function() {
                // Get the HTML content of the resume element
                var resumeContent = $('#resume').clone().find("style").remove().end().text().trim();
                var jd = $('#job-description').val();
                var similarity = cosineSimilarity(jd, resumeContent);
                var percentage = Math.round(similarity * 10000) / 100;
                $('#res-score').text(percentage.toFixed(2) + "%");
                if (percentage < 30) {
                    $('#res-score').css('color', 'red');
                } else if (percentage >= 30 && percentage <= 50) {
                    $('#res-score').css('color', 'orange');
                } else {
                    $('#res-score').css('color', 'green');
                }
            });
            

            // Close the resume popup when clicking on the close button
        $(document).on('click', '.close-btn', function() {
            $('#resume-popup').fadeOut();
            $('#overlay1').fadeOut();
        });
        $(document).on('click', '.close-popup-btn', function() {
            $('#resume-score-popup').fadeOut();
            $('#overlay2').fadeOut();
        });

        // Close the resume popup when clicking outside of it
        $(document).mouseup(function(e) {
            var container1 = $('#resume-popup');
            var container2 = $('#resume-score-popup');
            if (!container1.is(e.target) && container1.has(e.target).length === 0) {
                container1.fadeOut();
                $('#overlay1').fadeOut();
            }
            if (!container2.is(e.target) && container2.has(e.target).length === 0) {
                container2.fadeOut();
                $('#overlay2').fadeOut();
            }
        });
       
        function showLoader() {
            $('.loader').removeClass('hidden');
        }

        // Function to hide loader
        function hideLoader() {
            $('.loader').addClass('hidden');
        }

        function canvasToDataURL(canvas, format) {
            return canvas.toDataURL(format);
        }

        // Function to trigger JPG download
        function downloadAsJPG(canvas) {
            // Convert canvas content to data URL with JPG format using the canvasToDataURL function
            var dataURL = canvasToDataURL(canvas, 'image/jpeg');

            // Create a link element
            var link = document.createElement('a');
            link.href = dataURL;
            link.download = 'resume.jpg'; // Set the filename for the downloaded image

            // Trigger the click event on the link to initiate the download
            link.click();

            // Clean up by removing the link element
            link.remove();
        }

        $('#pdf-download').click(function () {
            showLoader();
    var resumeElement = $('#resume')[0];

    html2canvas(resumeElement, {
        scale: 2, // Increase scale to improve quality
        useCORS: true // Allow cross-origin images
    }).then(function(canvas) {
        var imgData = canvas.toDataURL('image/png'); // Convert canvas to base64 image data

        var pdf = new jsPDF({
            orientation: 'p',
            unit: 'pt', // Set units to points
            format: [canvas.width, canvas.height] // Set PDF dimensions to match canvas
        });

        // Add image to PDF
        pdf.addImage(imgData, 'PNG', 0, 0, pdf.internal.pageSize.getWidth(), pdf.internal.pageSize.getHeight());

        pdf.save('resume.pdf'); // Save PDF
        hideLoader();
    });
    });

        $('#jpg-download').click(function() {
            showLoader();
                var resumeElement = $('#resume')[0];

                html2canvas(resumeElement, {
                    scale: 2, // Increase scale to improve quality
                    useCORS: true // Allow cross-origin images
                }).then(function(canvas) {
                    downloadAsJPG(canvas);
                });
                hideLoader();
            });

        $('#html-download').click(function(){
            showLoader();
            var htmlContent = $('#resume').html();
            // Create a Blob object with HTML content
            var blob = new Blob([htmlContent], { type: 'text/html' });

            // Create a temporary anchor element to trigger download
            var downloadLink = document.createElement("a");
            downloadLink.href = window.URL.createObjectURL(blob);
            downloadLink.download = 'resume.html';

            // Trigger click event to initiate download
            document.body.appendChild(downloadLink);
            downloadLink.click();

            // Cleanup
            document.body.removeChild(downloadLink);
            hideLoader();
        })





    });
 
 </script>
</body>
</html>
